import{N as e,n as t,Y as a,Z as i,o as s,q as n,_ as o,s as r,W as l,Q as m,w as d,X as g,T as c,F as h,G as p,J as u}from"./preset_utils-Dg0Pd4HA.chunk.js";import{ar as f,b as y,T as S,ae as b,as as w,at as k,au as G,S as T,a2 as B,G as A,am as C,an as P,ao as R,av as v,a7 as O,a8 as W,a9 as F,aa as E,ab as I,a as M,ac as x,ad as D,aw as N,af as j,ag as H,ah as U,ai as $,ax as L,ay as J,az as q,F as z,R as _}from"./detailed_results-D0NcuTaI.chunk.js";import{s as Y}from"./apl_utils-DIxPGzUj.chunk.js";const Q=class e{constructor(t){this.player=t.player,this.sim=t.sim,this.gemPriorityByColor={};for(const a of e.allGemColors)this.gemPriorityByColor[a]=new Array;this.jcUpgradePriority=new Array,t.addAction("Suggest Gems","suggest-gems-action",(async()=>{this.optimizeGems()}))}async optimizeGems(){let t=this.player.getGear().withoutGems();this.numSocketedJcGems=0,this.epWeights=this.player.getEpWeights(),this.useJcGems=this.player.hasProfession(y.Jewelcrafting),this.isBlacksmithing=this.player.isBlacksmithing();const a=await this.updateGear(t);this.updateGemPriority(t,a),t=t.withMetaGem(this.sim.db.lookupGem(this.metaGemID)),t=this.activateMetaGem(t),await this.updateGear(t);for(const i of e.allGemColors)this.gemPriorityByColor[i].length>0&&(t=await this.fillGemsByColor(t,i),this.useJcGems&&(t=await this.substituteJcGems(t)))}async updateGear(e){return this.player.setGear(S.nextEventID(),e),await this.sim.updateCharacterStats(S.nextEventID()),b.fromProto(this.player.getCurrentStats().finalStats)}findStrongestSocketBonus(e,t,a,i){let s=null,n=1e-8;for(const o of e.getItemSlots()){const r=e.getEquippedItem(o);if(!r)continue;if(0!=r.numSocketsOfColor(i))continue;const l=r.numSocketsOfColor(t);if(0==l||a&&1!=l)continue;const m=new b(r.item.socketBonus).computeEP(this.epWeights)/l;m>n&&(s=o,n=m)}return{itemSlot:s,socketBonus:n}}socketGemInFirstMatchingSocket(e,t,a,i){if(null!=t){const s=e.getEquippedItem(t);if(!s)return e;for(const[n,o]of s.allSocketColors().entries())if(o==a)return e.withEquippedItem(t,s.withGem(this.sim.db.lookupGem(i),n),!0)}return e}async fillGemsByColor(e,t){const a=this.findSocketsByColor(e,t);return await this.fillGemsToCaps(e,a,this.gemPriorityByColor[t],0,0)}findSocketsByColor(e,t){const a=new Array;for(const i of e.getItemSlots()){const s=e.getEquippedItem(i);if(s)for(const[e,n]of s.curSocketColors(this.isBlacksmithing).entries())s.hasSocketedGem(e)||this.allowGemInSocket(t,n,i,s)&&a.push({itemSlot:i,socketIdx:e})}return a}async substituteJcGems(t){let a=t,i=0;for(;this.numSocketedJcGems<3&&i<this.jcUpgradePriority.length;){const t=this.jcUpgradePriority[i],s=this.sim.db.lookupGem(t.gemId);if(!a.getAllGems(this.isBlacksmithing).includes(s)){i+=1;continue}const n=this.sim.db.lookupGem(e.jcUpgradesById[t.gemId]),o=a.withSingleGemSubstitution(s,n,this.isBlacksmithing);(await this.updateGear(o)).belowCaps(t.statCaps)?(a=o,this.numSocketedJcGems+=1):(await this.updateGear(a),i+=1)}return a}async fillGemsToCaps(e,t,a,i,s){let n=e;const o=this.sim.db.lookupGem(a[i].gemId);if(0==i)for(const p of t.slice(s))n=n.withGem(p.itemSlot,p.socketIdx,o);let r=await this.updateGear(n);const l=a[i].statCaps;if(r.belowCaps(l)||i==a.length-1)return n;const m=this.sim.db.lookupGem(a[i+1].gemId),d=a[i+1].statCaps;let g=l.subtract(d);l.computeEP(g)<=0&&(g=l);let c=t.length-1;for(;c>=s&&!r.belowCaps(g);c--)n=n.withGem(t[c].itemSlot,t[c].socketIdx,m),r=await this.updateGear(n);let h=c+1;return r.belowCaps(l)||(h=s),await this.fillGemsToCaps(n,t,a,i+1,h)}};Q.allGemColors=[f.GemColorRed,f.GemColorYellow,f.GemColorBlue],Q.jcUpgradesById={40118:42154,40125:42156,40112:42143,40111:42142,40119:36767};const V=e({fieldName:"assumeBleedActive",label:"Assume Bleed Always Active",labelTooltip:"Assume bleed always exists for 'Rend and Tear' calculations. Otherwise will only calculate based on own rip/rake/lacerate.",extraCssClasses:["within-raid-sim-hide"]});function X(e){const t=e.getSimpleRotation();return t.manualParams&&t.rotationType==w.SingleTarget}const Z={inputs:[t({fieldName:"rotationType",label:"Type",values:[{name:"Single Target",value:w.SingleTarget},{name:"AOE",value:w.Aoe}]}),a({fieldName:"maintainFaerieFire",label:"Maintain Faerie Fire",labelTooltip:"Maintain Faerie Fire debuff. Overwrites any external Sunder effects specified in settings."}),a({fieldName:"meleeWeave",label:"Enable leave-weaving",labelTooltip:"Weave out of melee range for Stampede procs",showWhen:e=>e.getSimpleRotation().rotationType==w.SingleTarget&&e.getTalents().stampede>0,changeEmitter:e=>S.onAny([e.rotationChangeEmitter,e.talentsChangeEmitter])}),a({fieldName:"bearWeave",label:"Enable bear-weaving",labelTooltip:"Weave into Bear Form while pooling Energy"}),a({fieldName:"snekWeave",label:"Use Albino Snake",labelTooltip:"Reset swing timer at the end of bear-weaves using Albino Snake pet",showWhen:e=>e.getSimpleRotation().bearWeave}),a({fieldName:"allowAoeBerserk",label:"Allow AoE Berserk",labelTooltip:"Allow Berserk usage in AoE rotation",showWhen:e=>e.getSimpleRotation().rotationType==w.Aoe}),a({fieldName:"manualParams",label:"Manual Advanced Parameters",labelTooltip:"Manually specify advanced parameters, otherwise will use preset defaults",showWhen:e=>e.getSimpleRotation().rotationType==w.SingleTarget}),i({fieldName:"minRoarOffset",label:"Roar Offset",labelTooltip:"Targeted offset in Rip/Roar timings",showWhen:X}),i({fieldName:"ripLeeway",label:"Rip Leeway",labelTooltip:"Rip leeway when determining roar clips",showWhen:X}),a({fieldName:"useRake",label:"Use Rake",labelTooltip:"Use rake during rotation",showWhen:X}),a({fieldName:"useBite",label:"Bite during rotation",labelTooltip:"Use bite during rotation rather than just at end",showWhen:X}),i({fieldName:"biteTime",label:"Bite Time",labelTooltip:"Min seconds on Rip/Roar to bite",showWhen:e=>X(e)&&1==e.getSimpleRotation().useBite&&e.getSimpleRotation().biteModeType==k.Emperical}),a({fieldName:"biteDuringExecute",label:"Bite during Execute phase",labelTooltip:"Bite aggressively during Execute phase",showWhen:e=>X(e)&&e.getTalents().bloodInTheWater>0,changeEmitter:e=>S.onAny([e.rotationChangeEmitter,e.talentsChangeEmitter])})]},K={items:[{id:65190,enchant:4209,gems:[68778,52220],reforging:146},{id:65107,reforging:152},{id:65083,enchant:4204,gems:[52212],reforging:165},{id:65035,enchant:1099,reforging:146},{id:65192,enchant:4102,gems:[52212,52220],reforging:151},{id:65050,enchant:4258,gems:[0],reforging:146},{id:65073,enchant:4107,gems:[52212,0]},{id:60231,gems:[52220,52212,52212],reforging:144},{id:65381,randomSuffix:-199,enchant:4126,gems:[52212,52220],reforging:139},{id:65144,enchant:4076,gems:[52212],reforging:152},{id:65082,reforging:146},{id:65367,randomSuffix:-133,reforging:147},{id:65140},{id:65026},{id:65139,enchant:4227},{},{id:64671,gems:[52212],reforging:153}]},ee={items:[{id:46161,enchant:3817,gems:[41398,40002]},{id:45517,gems:[40002]},{id:45245,enchant:3808,gems:[40002,40002]},{id:46032,enchant:3605,gems:[40002,40058]},{id:45473,enchant:3832,gems:[40002,40002,40002]},{id:45869,enchant:3845,gems:[40037]},{id:46158,enchant:3604,gems:[40002]},{id:46095,gems:[40002,40002,40002]},{id:45536,enchant:3823,gems:[39996,39996,39996]},{id:45564,enchant:4223,gems:[39996,39996]},{id:46048,gems:[45862]},{id:45608,gems:[39996]},{id:45931},{id:46038},{id:45613,enchant:3789,gems:[40037,42702]},{},{id:40713}]},te={items:[{id:48204,enchant:3817,gems:[41398,40146]},{id:47060,gems:[40117]},{id:48207,enchant:3808,gems:[40146]},{id:47545,enchant:3605,gems:[40117]},{id:48206,enchant:3832,gems:[40117,40146]},{id:45611,enchant:3845,gems:[40146,0]},{id:47945,enchant:3604,gems:[40112,40117,0]},{id:47112,gems:[40146,40117,40117]},{id:48205,enchant:3823,gems:[40117,49110]},{id:47077,enchant:4223,gems:[40146,40117]},{id:47075,gems:[40117]},{id:45608,gems:[40117]},{id:45931},{id:47131},{id:47239,enchant:3789,gems:[40146,40117]},{},{id:47668}]},ae={items:[{id:51296,enchant:3817,gems:[41398,40117]},{id:50633,gems:[40117]},{id:51299,enchant:3808,gems:[40117]},{id:47545,enchant:3605,gems:[40117]},{id:51298,enchant:3832,gems:[40117,40125]},{id:50670,enchant:3845,gems:[40125,0]},{id:50675,enchant:3604,gems:[40162,40117,0]},{id:50707,gems:[40117,40117,40117]},{id:51297,enchant:3823,gems:[40117,40162]},{id:50607,enchant:4223,gems:[40143,40143]},{id:50604,gems:[40143]},{id:50402,gems:[40143]},{id:50363},{id:50343},{id:50735,enchant:3789,gems:[40117,49110,40143]},{},{id:50456}]},ie={type:"TypeAPL",priorityList:[{action:{autocastOtherCooldowns:{}}},{action:{condition:{const:{val:"false"}},castSpell:{spellId:{spellId:50334}}}},{action:{catOptimalRotationAction:{manualParams:!1,maintainFaerieFire:!0,meleeWeave:!0,bearWeave:!0,snekWeave:!0}}}]},se={type:"TypeAPL",priorityList:[{action:{autocastOtherCooldowns:{}}},{action:{condition:{const:{val:"false"}},castSpell:{spellId:{spellId:50334}}}},{action:{catOptimalRotationAction:{rotationType:"Aoe",manualParams:!1,maintainFaerieFire:!1,bearWeave:!0,snekWeave:!0}}}]},ne=s("Preraid Preset",{items:[{id:59455,enchant:4209,gems:[68778,59478,59489]},{id:67137,reforging:151},{id:58134,enchant:4204,gems:[52212],reforging:146},{id:67134,enchant:1099,reforging:146},{id:67135,enchant:4102,gems:[52212,52212],reforging:168},{id:63454,enchant:4258,gems:[0],reforging:168},{id:62433,enchant:3222,gems:[52212,0],reforging:154},{id:56537,gems:[52212,52212],reforging:168},{id:58132,enchant:4126,gems:[52212,52220],reforging:166},{id:63435,enchant:4076,gems:[52212],reforging:146},{id:62362,reforging:152},{id:67136,reforging:153},{id:62468,reforging:166},{id:56328,reforging:137},{id:55066,enchant:4227},{},{id:56316,gems:[52212]}]}),oe=s("P1 Preset",K),re=s("P2 Preset",ee),le=s("P3 Preset",te),me=s("P4 Preset",ae),de=n("APL Default",ie);n("APL AoE",se);const ge=G.create({rotationType:w.SingleTarget,bearWeave:!0,minCombosForRip:5,minCombosForBite:5,useRake:!0,useBite:!0,mangleSpam:!1,biteModeType:k.Emperical,biteTime:11,minRoarOffset:29,ripLeeway:1,maintainFaerieFire:!0,snekWeave:!0,manualParams:!1,biteDuringExecute:!0,allowAoeBerserk:!1,meleeWeave:!0}),ce=o("Single Target Default",T.SpecFeralDruid,ge),he=G.create({rotationType:w.Aoe,bearWeave:!0,maintainFaerieFire:!1,snekWeave:!0,allowAoeBerserk:!1}),pe=o("AoE Default",T.SpecFeralDruid,he),ue={name:"Mono-Cat",data:B.create({talentsString:"-2320322312012121202301-020301",glyphs:A.create({prime1:C.GlyphOfRip,prime2:C.GlyphOfBloodletting,prime3:C.GlyphOfBerserk,major1:P.GlyphOfThorns,major2:P.GlyphOfFeralCharge,major3:P.GlyphOfRebirth,minor1:R.GlyphOfDash,minor2:R.GlyphOfMarkOfTheWild,minor3:R.GlyphOfUnburdenedRebirth})})},fe={name:"Hybrid",data:B.create({talentsString:"-2300322312310001220311-020331",glyphs:A.create({prime1:C.GlyphOfRip,prime2:C.GlyphOfBloodletting,prime3:C.GlyphOfBerserk,major1:P.GlyphOfFrenziedRegeneration,major2:P.GlyphOfMaul,major3:P.GlyphOfRebirth,minor1:R.GlyphOfDash,minor2:R.GlyphOfChallengingRoar,minor3:R.GlyphOfUnburdenedRebirth})})},ye=v.create({assumeBleedActive:!0}),Se=O.create({flask:W.FlaskOfTheWinds,food:F.FoodSkeweredEel,defaultPotion:E.PotionOfTheTolvir,prepopPotion:E.PotionOfTheTolvir,tinkerHands:I.TinkerHandsSynapseSprings}),be={distanceFromTarget:25,duration:240,durationVariation:15,highHpThreshold:.8},we=r(T.SpecFeralDruid,{cssClass:"feral-druid-sim-ui",cssScheme:M.getCssClass(M.Druid),knownIssues:[],warnings:[],epStats:[x.StatStrength,x.StatAgility,x.StatAttackPower,x.StatMeleeHit,x.StatExpertise,x.StatMeleeCrit,x.StatMeleeHaste,x.StatMastery],epPseudoStats:[D.PseudoStatMainHandDps],epReferenceStat:x.StatAgility,displayStats:[x.StatHealth,x.StatStrength,x.StatAgility,x.StatAttackPower,x.StatMeleeHit,x.StatExpertise,x.StatMeleeCrit,x.StatMeleeHaste,x.StatMastery,x.StatMana],defaults:{gear:ne.gear,epWeights:b.fromMap({[x.StatStrength]:.39,[x.StatAgility]:1,[x.StatAttackPower]:.37,[x.StatMeleeHit]:.33,[x.StatExpertise]:.32,[x.StatMeleeCrit]:.31,[x.StatMeleeHaste]:.26,[x.StatMastery]:.3},{[D.PseudoStatMainHandDps]:1.53}),other:be,consumes:Se,rotationType:N.TypeSimple,simpleRotation:ge,talents:ue.data,specOptions:ye,raidBuffs:j.create({markOfTheWild:!0,strengthOfEarthTotem:!0,abominationsMight:!0,windfuryTotem:!0,bloodlust:!0,communion:!0,arcaneBrilliance:!0,manaSpringTotem:!0}),partyBuffs:H.create({}),individualBuffs:U.create({}),debuffs:$.create({bloodFrenzy:!0})},playerIconInputs:[],rotationInputs:Z,includeBuffDebuffInputs:[l,m],excludeBuffDebuffInputs:[],otherInputs:{inputs:[V,d,g,c,h,p]},encounterPicker:{showExecuteProportion:!0},presets:{talents:[ue,fe],rotations:[ce,pe],gear:[ne,oe]},autoRotation:e=>de.rotation.rotation,simpleRotation:(e,t,a)=>{const[i,s]=Y(a),n=L.fromJsonString('{"condition":{"const":{"val":"false"}},"castSpell":{"spellId":{"spellId":50334}}}'),o=L.fromJsonString(`{"catOptimalRotationAction":{"rotationType":${t.rotationType},"manualParams":${t.manualParams},"maintainFaerieFire":${t.maintainFaerieFire},"allowAoeBerserk":${t.allowAoeBerserk},"meleeWeave":${t.meleeWeave},"bearWeave":${t.bearWeave},"snekWeave":${t.snekWeave},"minRoarOffset":${t.minRoarOffset.toFixed(2)},"ripLeeway":${t.ripLeeway.toFixed(0)},"useRake":${t.useRake},"useBite":${t.useBite},"biteDuringExecute":${t.biteDuringExecute},"biteTime":${t.biteTime.toFixed(2)}}}`);return s.push(...[n,o].filter((e=>e))),J.create({prepullActions:i,priorityList:s.map((e=>q.create({action:e})))})},raidSimPresets:[{spec:T.SpecFeralDruid,talents:ue.data,specOptions:ye,consumes:Se,defaultFactionRaces:{[z.Unknown]:_.RaceUnknown,[z.Alliance]:_.RaceNightElf,[z.Horde]:_.RaceTauren},defaultGear:{[z.Unknown]:{},[z.Alliance]:{1:oe.gear,2:re.gear,3:le.gear,4:me.gear},[z.Horde]:{1:oe.gear,2:re.gear,3:le.gear,4:me.gear}},otherDefaults:be}]});class ke extends u{constructor(e,t){super(e,t,we)}}export{ke as F};
